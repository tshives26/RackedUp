# Complete Serena Installation Guide for Windows 11 + Cursor + Android Studio

This comprehensive guide will walk you through installing and configuring Serena for your RackedUp Android project on Windows 11. Serena is a powerful coding agent toolkit that provides semantic retrieval and editing capabilities through MCP (Model Context Protocol) integration.

## What is Serena?

Serena is an open-source coding agent that uses language servers to understand your code symbolically, not just as text. It provides:
- **Semantic Code Understanding**: Understands code structure, symbols, and relationships
- **Precise Code Navigation**: Find symbols, references, and understand dependencies
- **Intelligent Code Editing**: Make targeted changes while maintaining code structure
- **Project Context Awareness**: Remembers your project's patterns and decisions
- **MCP Integration**: Works with any MCP-compatible client (like Cursor)

## Prerequisites

Before installing Serena, ensure you have:

- **Python 3.8+** installed (check with `python --version`)
- **Node.js 16+** installed (for language servers)
- **Git** installed
- **Windows Terminal** or **PowerShell** (recommended)
- **Cursor** with MCP support
- Your **RackedUp project** open in Cursor

### Verify Prerequisites

```powershell
# Check Python version
python --version

# Check Node.js version
node --version

# Check Git installation
git --version

# Check if you're in the right directory
pwd
# Should show: C:\Users\tshiv\AndroidStudioProjects\RackedUp
```

## Step 1: Install Python Dependencies

### Option A: Using uv (Recommended)

uv is a fast Python package installer and resolver. It's significantly faster than pip and provides better dependency resolution.

```powershell
# Install uv if you don't have it
pip install uv

# Create a new virtual environment and install Serena
uv venv serena-env
.\serena-env\Scripts\Activate.ps1
uv pip install serena

# Verify installation
serena --version
```

### Option B: Using pip

If you prefer to use pip directly:

```powershell
# Create virtual environment
python -m venv serena-env
.\serena-env\Scripts\Activate.ps1

# Upgrade pip to latest version
python -m pip install --upgrade pip

# Install Serena
pip install serena

# Verify installation
serena --version
```

### Option C: Using conda (Alternative)

If you use Anaconda or Miniconda:

```powershell
# Create conda environment
conda create -n serena-env python=3.11
conda activate serena-env

# Install Serena
pip install serena
```

## Step 2: Verify Installation

After installation, verify everything is working correctly:

```powershell
# Check if Serena is installed
serena --version

# List available tools
serena tools list

# Check available contexts
serena contexts list

# Check available modes
serena modes list

# Get help
serena --help
```

### Expected Output

You should see output similar to:
```
Serena v0.1.4
Available tools: activate_project, check_onboarding_performed, create_text_file, ...
Available contexts: android, kotlin, compose, desktop-app, web-app
Available modes: default, debug, production
```

## Step 3: Configure Serena for Your RackedUp Project

### Initialize Serena in Your Project

```powershell
# Navigate to your RackedUp project directory
cd C:\Users\tshiv\AndroidStudioProjects\RackedUp

# Initialize Serena project
serena init

# This will create a .serena directory with configuration files
```

### Configure Project Settings

Create a `.serena/config.toml` file in your project root with the following configuration:

```toml
[project]
name = "rackedup"
description = "Android fitness tracking app with MVVM + Compose + Room"
root_path = "C:\\Users\\tshiv\\AndroidStudioProjects\\RackedUp"

[language_servers]
kotlin = "kotlin-language-server"
java = "java-language-server"
xml = "lemminx"  # For Android XML files

[contexts]
default = ["android", "kotlin", "compose"]
available = ["android", "kotlin", "compose", "desktop-app"]

[tools]
enabled = [
    "find_symbol",
    "find_referencing_symbols", 
    "get_symbols_overview",
    "insert_after_symbol",
    "insert_before_symbol",
    "replace_symbol_body",
    "read_file",
    "write_file",
    "execute_shell_command",
    "search_for_pattern",
    "replace_regex"
]

[performance]
cache_enabled = true
cache_dir = "C:\\Users\\tshiv\\.serena\\cache"
max_file_size = 10485760  # 10MB
log_level = "INFO"
```

### Project-Specific Configuration

Create additional configuration files for better Android development support:

#### `.serena/project.toml`

```toml
[project.rackedup]
name = "RackedUp"
type = "android"
language = "kotlin"
framework = "jetpack-compose"

[project.rackedup.structure]
src_dir = "app/src/main/java"
res_dir = "app/src/main/res"
build_dir = "app/build"
gradle_dir = "."

[project.rackedup.patterns]
kotlin_files = ["*.kt"]
java_files = ["*.java"]
xml_files = ["*.xml"]
gradle_files = ["*.gradle.kts", "build.gradle"]
```

## Step 4: Install Language Servers

Language servers provide Serena with deep understanding of your code structure, syntax, and semantics.

### Install Kotlin Language Server

```powershell
# Install Kotlin language server globally
npm install -g kotlin-language-server

# Or using Chocolatey (if you have it installed)
choco install kotlin-language-server

# Verify installation
kotlin-language-server --version
```

### Install Java Language Server

```powershell
# Install Eclipse JDT Language Server
npm install -g java-language-server

# Or download from Eclipse
# Visit: https://download.eclipse.org/jdtls/snapshots/
# Download the latest version and extract to a directory
# Add the bin directory to your PATH

# Verify installation
java-language-server --version
```

### Install XML Language Server (for Android XML files)

```powershell
# Install LemMinX for XML support
npm install -g @redhat-developer/vscode-xml

# Or download from GitHub releases
# Visit: https://github.com/redhat-developer/vscode-xml/releases
```

### Alternative: Using Language Server Manager

```powershell
# Install language server manager
npm install -g @vscode/language-server-manager

# Install all required language servers
lsm install kotlin-language-server
lsm install java-language-server
lsm install @redhat-developer/vscode-xml
```

### Verify Language Server Installation

```powershell
# Check if all language servers are available
where kotlin-language-server
where java-language-server
where lemminx

# Test language server functionality
echo 'fun main() { println("Hello") }' | kotlin-language-server --stdio
```

## Step 5: Configure Cursor for MCP

### Install MCP Extension

1. Open Cursor
2. Go to Extensions (Ctrl+Shift+X)
3. Search for "MCP" or "Model Context Protocol"
4. Install the MCP extension
5. Restart Cursor

### Configure MCP Settings

Add the following configuration to your Cursor settings.json (File > Preferences > Settings > Open Settings JSON):

```json
{
    "mcp.servers": {
        "serena": {
            "command": "serena",
            "args": ["mcp"],
            "env": {
                "SERENA_PROJECT": "C:\\Users\\tshiv\\AndroidStudioProjects\\RackedUp",
                "SERENA_LOG_LEVEL": "INFO"
            },
            "cwd": "C:\\Users\\tshiv\\AndroidStudioProjects\\RackedUp"
        }
    },
    "mcp.experimental": true,
    "mcp.logging": "debug"
}
```

### Alternative: Using MCP Configuration File

Create a `.mcp/servers.json` file in your project root:

```json
{
    "mcpServers": {
        "serena": {
            "command": "serena",
            "args": ["mcp"],
            "env": {
                "SERENA_PROJECT": "C:\\Users\\tshiv\\AndroidStudioProjects\\RackedUp"
            }
        }
    }
}
```

### Test MCP Connection

```powershell
# Test MCP server manually
serena mcp --verbose

# Check Cursor's MCP status
# Look for MCP-related messages in Cursor's output panel
```

## Step 6: Test Serena Integration

### Basic Commands to Test

```powershell
# Navigate to your project
cd C:\Users\tshiv\AndroidStudioProjects\RackedUp

# Activate the project
serena activate rackedup

# Perform onboarding (this analyzes your project structure)
serena onboarding

# Test symbol finding
serena find_symbol --name "Exercise" --type "class"

# Test file reading
serena read_file --path "app/src/main/java/com/chilluminati/rackedup/data/database/entity/Exercise.kt"

# Test directory listing
serena list_dir --path "app/src/main/java/com/chilluminati/rackedup"

# Test pattern search
serena search_for_pattern --pattern "class.*ViewModel"
```

### Expected Onboarding Output

The onboarding process should identify:
- Project structure and architecture
- Main entry points
- Database entities and relationships
- UI components and screens
- Build configuration
- Testing setup

## Step 7: Configure Android-Specific Settings

### Create Android Context

Create `.serena/contexts/android.toml`:

```toml
[context]
name = "android"
description = "Android development context for RackedUp"
priority = 1

[tools]
enabled = [
    "execute_shell_command",
    "find_symbol",
    "get_symbols_overview",
    "read_file",
    "write_file",
    "search_for_pattern"
]

[patterns]
android_files = [
    "*.kt",
    "*.java", 
    "*.xml",
    "*.gradle.kts",
    "AndroidManifest.xml",
    "*.properties"
]

[commands]
build = "./gradlew assembleDebug"
test = "./gradlew test"
clean = "./gradlew clean"
lint = "./gradlew lint"
format = "./gradlew ktfmtFormat"

[android]
sdk_path = "C:\\Users\\tshiv\\AppData\\Local\\Android\\Sdk"
build_tools_version = "34.0.0"
compile_sdk = 36
target_sdk = 36
min_sdk = 26
```

### Create Kotlin Context

Create `.serena/contexts/kotlin.toml`:

```toml
[context]
name = "kotlin"
description = "Kotlin development context"
priority = 2

[language_server]
command = "kotlin-language-server"
args = ["--stdio"]
timeout = 30

[patterns]
kotlin_files = ["*.kt"]
kotlin_test_files = ["*Test.kt", "*Spec.kt"]

[kotlin]
version = "1.9.22"
compiler_args = [
    "-opt-in=kotlin.RequiresOptIn",
    "-opt-in=androidx.compose.material3.ExperimentalMaterial3Api"
]
```

### Create Compose Context

Create `.serena/contexts/compose.toml`:

```toml
[context]
name = "compose"
description = "Jetpack Compose development context"
priority = 3

[patterns]
compose_files = ["*Screen.kt", "*Composable.kt"]
theme_files = ["*Theme.kt", "*Color.kt"]

[compose]
version = "1.5.8"
material_version = "1.2.0"
navigation_version = "2.9.3"

[conventions]
composable_functions = "PascalCase"
screen_files = "*Screen.kt"
theme_files = "*Theme.kt"
```

## Step 8: Serena Usage Examples for RackedUp

### Find ViewModels

```powershell
# Find all ViewModel classes
serena find_symbol --name "ViewModel" --type "class"

# Find specific ViewModel
serena find_symbol --name "DashboardViewModel" --type "class"

# Find ViewModels in specific directory
serena find_symbol --name "ViewModel" --type "class" --path "app/src/main/java/com/chilluminati/rackedup/presentation"
```

### Find Repository Implementations

```powershell
# Find all Repository classes
serena find_symbol --name "Repository" --type "class"

# Find specific repository
serena find_symbol --name "WorkoutRepository" --type "class"

# Find repositories with specific pattern
serena search_for_pattern --pattern "class.*Repository"
```

### Find Room DAOs

```powershell
# Find all DAO interfaces
serena find_symbol --name "Dao" --type "interface"

# Find specific DAO
serena find_symbol --name "ExerciseDao" --type "interface"

# Find DAOs in database package
serena find_symbol --name "Dao" --type "interface" --path "app/src/main/java/com/chilluminati/rackedup/data/database/dao"
```

### Get File Overview

```powershell
# Get overview of a ViewModel
serena get_symbols_overview --file "app/src/main/java/com/chilluminati/rackedup/presentation/dashboard/DashboardViewModel.kt"

# Get overview of an entity
serena get_symbols_overview --file "app/src/main/java/com/chilluminati/rackedup/data/database/entity/Exercise.kt"

# Get overview of a Composable
serena get_symbols_overview --file "app/src/main/java/com/chilluminati/rackedup/presentation/dashboard/DashboardScreen.kt"
```

### Find References

```powershell
# Find all references to Exercise entity
serena find_referencing_symbols --file "app/src/main/java/com/chilluminati/rackedup/data/database/entity/Exercise.kt" --line 10

# Find references to a specific function
serena find_referencing_symbols --file "app/src/main/java/com/chilluminati/rackedup/presentation/dashboard/DashboardViewModel.kt" --line 25

# Find all usages of a specific annotation
serena search_for_pattern --pattern "@HiltViewModel"
```

### Advanced Search Patterns

```powershell
# Find all Composable functions
serena search_for_pattern --pattern "@Composable\\s+fun"

# Find all Room entities
serena search_for_pattern --pattern "@Entity"

# Find all Hilt ViewModels
serena search_for_pattern --pattern "@HiltViewModel"

# Find all StateFlow declarations
serena search_for_pattern --pattern "StateFlow<"

# Find all suspend functions
serena search_for_pattern --pattern "suspend\\s+fun"
```

## Step 9: Advanced Configuration

### Custom Tools for Android Development

Create `.serena/tools/android_tools.py`:

```python
from serena.agent import Tool
import subprocess
import os
from pathlib import Path

class GradleBuildTool(Tool):
    name = "gradle_build"
    description = "Build Android project using Gradle"
    
    def apply(self, build_type: str = "debug", clean: bool = False):
        """Build the Android project using Gradle"""
        project_root = Path(self.project_root)
        gradlew = project_root / "gradlew.bat"  # Windows
        
        commands = []
        if clean:
            commands.append([str(gradlew), "clean"])
        
        if build_type == "debug":
            commands.append([str(gradlew), "assembleDebug"])
        elif build_type == "release":
            commands.append([str(gradlew), "assembleRelease"])
        elif build_type == "test":
            commands.append([str(gradlew), "test"])
        elif build_type == "lint":
            commands.append([str(gradlew), "lint"])
        
        results = []
        for cmd in commands:
            try:
                result = subprocess.run(cmd, cwd=project_root, capture_output=True, text=True)
                results.append({
                    "command": " ".join(cmd),
                    "success": result.returncode == 0,
                    "output": result.stdout,
                    "error": result.stderr
                })
            except Exception as e:
                results.append({
                    "command": " ".join(cmd),
                    "success": False,
                    "error": str(e)
                })
        
        return results

class AndroidTestTool(Tool):
    name = "android_test"
    description = "Run Android tests"
    
    def apply(self, test_type: str = "unit", class_name: str = None):
        """Run Android tests"""
        project_root = Path(self.project_root)
        gradlew = project_root / "gradlew.bat"
        
        if test_type == "unit":
            cmd = [str(gradlew), "test"]
        elif test_type == "instrumented":
            cmd = [str(gradlew), "connectedAndroidTest"]
        elif test_type == "specific" and class_name:
            cmd = [str(gradlew), "test", f"--tests={class_name}"]
        else:
            cmd = [str(gradlew), "test"]
        
        try:
            result = subprocess.run(cmd, cwd=project_root, capture_output=True, text=True)
            return {
                "success": result.returncode == 0,
                "output": result.stdout,
                "error": result.stderr,
                "command": " ".join(cmd)
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "command": " ".join(cmd)
            }

class AndroidLintTool(Tool):
    name = "android_lint"
    description = "Run Android Lint checks"
    
    def apply(self, variant: str = "debug"):
        """Run Android Lint"""
        project_root = Path(self.project_root)
        gradlew = project_root / "gradlew.bat"
        
        cmd = [str(gradlew), f"lint{variant.capitalize()}"]
        
        try:
            result = subprocess.run(cmd, cwd=project_root, capture_output=True, text=True)
            return {
                "success": result.returncode == 0,
                "output": result.stdout,
                "error": result.stderr,
                "command": " ".join(cmd)
            }
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "command": " ".join(cmd)
            }
```

### Memory Configuration

Create `.serena/memory/project_memory.json`:

```json
{
    "project_structure": {
        "architecture": "MVVM with Jetpack Compose",
        "database": "Room with DAOs",
        "di": "Hilt dependency injection",
        "ui": "Material 3 with dynamic theming",
        "navigation": "Navigation Compose",
        "async": "Coroutines with StateFlow",
        "testing": "JUnit + Mockk + Compose Testing"
    },
    "common_patterns": {
        "viewmodels": "Use StateFlow for state management, inject repositories via Hilt",
        "repositories": "Implement repository pattern with Room DAOs, use suspend functions",
        "compose": "Use Material 3 components and theming, follow Compose best practices",
        "entities": "Use Room entities with proper annotations, include TypeConverters for complex types",
        "daos": "Use suspend functions for database operations, include proper error handling",
        "screens": "Create separate Screen composables with ViewModels, use proper state management"
    },
    "conventions": {
        "naming": "PascalCase for classes, camelCase for functions and variables",
        "file_structure": "Group by feature, separate UI from business logic",
        "packages": "com.chilluminati.rackedup.{layer}.{feature}",
        "testing": "Test ViewModels with Turbine, use Hilt testing modules"
    },
    "dependencies": {
        "compose_bom": "2024.12.01",
        "material3": "1.2.0",
        "navigation": "2.9.3",
        "room": "2.6.1",
        "hilt": "2.51.1",
        "coroutines": "1.8.0"
    },
    "key_files": {
        "main_activity": "app/src/main/java/com/chilluminati/rackedup/MainActivity.kt",
        "application": "app/src/main/java/com/chilluminati/rackedup/RackedUpApplication.kt",
        "database": "app/src/main/java/com/chilluminati/rackedup/data/database/RackedUpDatabase.kt",
        "build_gradle": "app/build.gradle.kts",
        "manifest": "app/src/main/AndroidManifest.xml"
    }
}
```

### Performance Configuration

Create `.serena/config/performance.toml`:

```toml
[performance]
cache_enabled = true
cache_dir = "C:\\Users\\tshiv\\.serena\\cache"
max_file_size = 10485760  # 10MB
log_level = "INFO"
max_workers = 4

[cache]
ttl_hours = 24
max_size_mb = 1000
cleanup_interval_hours = 6

[language_servers]
timeout_seconds = 30
max_retries = 3
restart_on_failure = true

[search]
max_results = 100
include_hidden = false
exclude_patterns = [
    "**/build/**",
    "**/.gradle/**",
    "**/node_modules/**",
    "**/.git/**"
]
```

## Step 10: Troubleshooting

### Common Issues and Solutions

#### Language Server Not Found

```powershell
# Check if language servers are in PATH
where kotlin-language-server
where java-language-server
where lemminx

# If not found, add to PATH or use full paths in config
# Add to your PATH environment variable:
# C:\Users\tshiv\AppData\Roaming\npm

# Or specify full paths in .serena/config.toml
[language_servers]
kotlin = "C:\\Users\\tshiv\\AppData\\Roaming\\npm\\kotlin-language-server.cmd"
java = "C:\\Users\\tshiv\\AppData\\Roaming\\npm\\java-language-server.cmd"
```

#### Permission Issues

```powershell
# Run PowerShell as Administrator if needed
# Or adjust execution policy
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser

# If you get script execution errors
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process

# Check file permissions
icacls "C:\Users\tshiv\AndroidStudioProjects\RackedUp"
```

#### Project Not Found

```powershell
# Ensure you're in the correct directory
pwd
# Should show: C:\Users\tshiv\AndroidStudioProjects\RackedUp

# Check if .serena directory exists
ls .serena

# Reinitialize if needed
serena init --force

# Check project configuration
serena get_current_config
```

#### MCP Connection Issues

```powershell
# Test MCP server manually
serena mcp --verbose

# Check Cursor logs for MCP errors
# In Cursor: Help > Toggle Developer Tools > Console

# Restart MCP server
serena restart_language_server

# Check MCP configuration
cat .serena/config.toml | grep -A 10 "mcp"
```

#### Language Server Timeout

```powershell
# Increase timeout in configuration
# Edit .serena/config.toml
[language_servers]
timeout_seconds = 60

# Restart language servers
serena restart_language_server

# Check language server logs
# Look for timeout errors in Cursor's output panel
```

#### Memory Issues

```powershell
# Clear Serena cache
Remove-Item -Recurse -Force "C:\Users\tshiv\.serena\cache"

# Check memory usage
Get-Process | Where-Object {$_.ProcessName -like "*serena*"}

# Restart Serena
serena restart_language_server
```

#### Gradle Integration Issues

```powershell
# Test Gradle commands manually
.\gradlew --version
.\gradlew assembleDebug

# Check Gradle wrapper
ls gradlew*
ls gradle\wrapper\gradle-wrapper.properties

# Update Gradle wrapper if needed
.\gradlew wrapper --gradle-version 8.12
```

### Debug Mode

Enable debug mode for detailed logging:

```powershell
# Set debug environment variable
$env:SERENA_LOG_LEVEL = "DEBUG"

# Run Serena with debug output
serena --debug find_symbol --name "Exercise"

# Check debug logs
Get-Content "C:\Users\tshiv\.serena\logs\serena.log" -Tail 50
```

### Performance Issues

```powershell
# Check system resources
Get-Process | Where-Object {$_.CPU -gt 10}

# Optimize file watching
# Add to .serena/config.toml
[performance]
file_watcher_enabled = false
max_file_size = 5242880  # 5MB

# Clear caches
Remove-Item -Recurse -Force "C:\Users\tshiv\.serena\cache"
Remove-Item -Recurse -Force "C:\Users\tshiv\AndroidStudioProjects\RackedUp\.gradle"
```

## Step 11: Integration with Android Studio

### Configure Android Studio to Work with Serena

1. **Keep Android Studio for**: Gradle sync, device management, debugging, layout editor
2. **Use Cursor + Serena for**: Code editing, refactoring, AI assistance, semantic analysis
3. **Sync between editors**: Both editors will read the same files, changes sync automatically

### Recommended Workflow

1. **Android Studio**: Build, run, debug, device management, layout editing
2. **Cursor + Serena**: Code editing, AI assistance, refactoring, semantic analysis
3. **Terminal**: Serena commands, Git operations, Gradle tasks

### File Synchronization

```powershell
# Both editors will automatically detect file changes
# No additional configuration needed for file sync

# If you experience sync issues:
# 1. Save all files in both editors
# 2. Refresh file explorer in Cursor (Ctrl+Shift+E)
# 3. Sync project in Android Studio (File > Sync Project with Gradle Files)
```

### Build Integration

```powershell
# Use Serena to trigger builds
serena execute_shell_command --command ".\gradlew assembleDebug"

# Or use custom Gradle tool
serena gradle_build --build_type debug

# Check build status
serena execute_shell_command --command ".\gradlew --status"
```

## Step 12: Performance Optimization

### Windows-Specific Optimizations

```powershell
# Add to your PowerShell profile for faster startup
# Edit: $PROFILE
$env:SERENA_CACHE_DIR = "C:\Users\tshiv\.serena\cache"
$env:SERENA_LOG_LEVEL = "INFO"
$env:SERENA_MAX_WORKERS = "4"

# Use Windows Terminal for better performance
# Enable GPU acceleration in Windows Terminal settings
# Settings > Appearance > Use GPU acceleration

# Optimize file system
# Enable Windows Defender exclusions for development folders
Add-MpPreference -ExclusionPath "C:\Users\tshiv\AndroidStudioProjects"
Add-MpPreference -ExclusionPath "C:\Users\tshiv\.serena"
```

### Project-Specific Optimizations

```toml
# Add to .serena/config.toml
[performance]
cache_enabled = true
cache_dir = "C:\\Users\\tshiv\\.serena\\cache"
max_file_size = 10485760  # 10MB
max_workers = 4
file_watcher_enabled = false

[search]
exclude_patterns = [
    "**/build/**",
    "**/.gradle/**",
    "**/node_modules/**",
    "**/.git/**",
    "**/build_backup/**",
    "**/intermediates/**"
]

[cache]
ttl_hours = 24
max_size_mb = 1000
cleanup_interval_hours = 6
```

### Memory Management

```powershell
# Monitor memory usage
Get-Process | Where-Object {$_.ProcessName -like "*serena*"} | Select-Object ProcessName, WorkingSet, CPU

# Set memory limits
$env:SERENA_MAX_MEMORY = "2048m"

# Optimize JVM settings for language servers
$env:JAVA_OPTS = "-Xmx2g -Xms512m"
```

### Network Optimization

```powershell
# If using remote language servers or MCP
# Optimize network settings
$env:SERENA_NETWORK_TIMEOUT = "30"
$env:SERENA_MAX_RETRIES = "3"

# Use local language servers when possible
# Configure in .serena/config.toml
[language_servers]
use_local = true
```

## Step 13: Advanced Features

### Custom Scripts and Automation

Create `.serena/scripts/` directory for custom automation:

#### `build_and_test.ps1`

```powershell
# Build and test script
param(
    [string]$BuildType = "debug",
    [switch]$Clean,
    [switch]$Test
)

Write-Host "Building RackedUp project..." -ForegroundColor Green

if ($Clean) {
    Write-Host "Cleaning project..." -ForegroundColor Yellow
    .\gradlew clean
}

Write-Host "Building $BuildType..." -ForegroundColor Yellow
.\gradlew "assemble$($BuildType.Substring(0,1).ToUpper() + $BuildType.Substring(1))"

if ($Test) {
    Write-Host "Running tests..." -ForegroundColor Yellow
    .\gradlew test
}

Write-Host "Build complete!" -ForegroundColor Green
```

#### `code_analysis.ps1`

```powershell
# Code analysis script
Write-Host "Running code analysis..." -ForegroundColor Green

# Run lint
.\gradlew lintDebug

# Run ktlint
.\gradlew ktlintCheck

# Run detekt (if configured)
if (Test-Path "detekt.yml") {
    .\gradlew detekt
}

Write-Host "Analysis complete!" -ForegroundColor Green
```

### Integration with Git

```powershell
# Pre-commit hooks using Serena
# Create .git/hooks/pre-commit

#!/bin/sh
# Run Serena analysis before commit
serena search_for_pattern --pattern "TODO|FIXME|HACK"
serena execute_shell_command --command ".\gradlew lintDebug"
```

### Continuous Integration

Create `.github/workflows/serena-analysis.yml`:

```yaml
name: Serena Code Analysis

on: [push, pull_request]

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Serena
      run: |
        pip install serena
    
    - name: Run Serena Analysis
      run: |
        serena activate rackedup
        serena search_for_pattern --pattern "TODO|FIXME"
        serena find_symbol --name "ViewModel" --type "class"
```

## Verification Checklist

- [ ] Serena installed and working (`serena --version`)
- [ ] Project initialized (`serena activate rackedup`)
- [ ] Language servers installed and configured
- [ ] Cursor MCP extension installed and configured
- [ ] Basic commands working (find_symbol, read_file)
- [ ] Android-specific contexts configured
- [ ] Project onboarding completed successfully
- [ ] Memory system working
- [ ] Gradle integration tested
- [ ] Performance optimizations applied
- [ ] Troubleshooting procedures documented

## Next Steps

Once Serena is configured, you can:

1. **Start with simple queries**: Find symbols, read files, understand project structure
2. **Progress to complex operations**: Refactoring, code generation, architectural improvements
3. **Create custom tools**: Android-specific automation, build scripts, analysis tools
4. **Integrate with your workflow**: Combine with Android Studio, Git hooks, CI/CD
5. **Extend functionality**: Add custom contexts, tools, and automation scripts

## Additional Resources

- **Serena Documentation**: https://github.com/oraios/serena
- **MCP Protocol**: https://modelcontextprotocol.io/
- **Kotlin Language Server**: https://github.com/fwcd/kotlin-language-server
- **Eclipse JDT Language Server**: https://github.com/eclipse/eclipse.jdt.ls
- **Cursor MCP Support**: Check Cursor's documentation for MCP integration

This comprehensive setup will give you powerful semantic code understanding and editing capabilities specifically tailored for your RackedUp Android project, while maintaining full compatibility with your existing Android Studio workflow. Serena will become an invaluable tool for navigating your complex MVVM + Compose + Room architecture and accelerating your development process.